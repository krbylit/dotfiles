#!/usr/bin/env sh
# find all executable files in ~/.config/yabai and execute them
# find "${HOME}/.config/yabai" -type f -perm +111 -exec {} \;
# Load scripting addition (requires root and SIP disabled)
yabai -m signal --add event=dock_did_restart action="sudo yabai --load-sa"

sudo yabai --load-sa

# Basic variables
BAR_HEIGHT=$(sketchybar -m --query bar | jq -r '.height')
TOP_PADDING=$((BAR_HEIGHT + 6))
PADDING=6

# Space names (in order)
SPACES="term browser code dev comms ref misc debug util"

# Display detection
DISPLAY_COUNT=$(yabai -m query --displays | jq '. | length')
DISPLAY_2=$((DISPLAY_COUNT > 1 ? 2 : 1))

# Main display spaces
MAIN_SPACES="term browser code dev"
# Secondary display spaces
SEC_SPACES="comms ref misc debug util"

# General Configurations
# yabai -m config external_bar "${BAR_HEIGHT}":0
yabai -m config split_ratio 0.5
yabai -m config auto_balance off
yabai -m config insert_feedback_color 0xff7793d1
yabai -m config mouse_follows_focus on

# Window Configurations
yabai -m config window_placement second_child
yabai -m config window_shadow off
yabai -m config window_opacity off
yabai -m config window_animation_duration 0.0
yabai -m config window_origin_display default
yabai -m config active_window_opacity 1.0
yabai -m config normal_window_opacity 0.95
yabai -m config window_opacity_duration 0.15

# Layout Configurations
# Set default layout
yabai -m config layout bsp
yabai -m config split_type auto

yabai -m config top_padding 6
yabai -m config bottom_padding 6
yabai -m config left_padding 6
yabai -m config right_padding 6
yabai -m config window_gap 6

# Mouse Configurations
yabai -m config mouse_modifier alt
yabai -m config mouse_action1 move
yabai -m config mouse_action2 resize
yabai -m config mouse_drop_action swap
yabai -m config focus_follows_mouse off
yabai -m config mouse_follows_focus off

# Create and label spaces
i=1
for space in $SPACES; do
	yabai -m space $i --label $space
	i=$((i + 1))
done

# Assign spaces to displays
for space in $MAIN_SPACES; do
	yabai -m space $space --display 1
done

for space in $SEC_SPACES; do
	yabai -m space $space --display $DISPLAY_2
done

# Rules for Excluded Applications
yabai -m rule --add label=Finder app="^Finder$" title="(Co(py|nnect)|Move|Info|Pref)" manage=off
# yabai -m rule --add label=Safari app="^Safari$" title="^(General|(Tab|Password|Website|Extension)s|AutoFill|Se(arch|curity)|Privacy|Advance)$" manage=off
yabai -m rule --add label="About This Mac" app="System Information" title="About This Mac" manage=off
# Don't manage 1Pass pop-ups
yabai -m rule --add label="1Password Item" app="^1Password$" title="!^All Accounts" manage=off

# Unmanaged Applications
UNMANAGED_APPS="Alfred 'App Store' 'Archive Utility' Calculator Dictionary FaceTime 'Photo Booth' Python 'Screen Sharing' Screens 'Software Update' Stats 'System Information' 'System Preferences' 'System Settings'"

for app in $UNMANAGED_APPS; do
	yabai -m rule --add label="unmanage_${app}" app="^${app}$" manage=off
done

# Sticky Applications
STICKY_APPS="'System Preferences' 'System Settings'"

for app in $STICKY_APPS; do
	yabai -m rule --add label="sticky_${app}" app="^${app}$" sticky=on
done

# Rules for Sticky Applications
yabai -m rule --add label=sticky_SystemPreferences app="^System Preferences$" sticky=on
yabai -m rule --add label=sticky_SystemSettings app="^System Settings$" sticky=on

# Space assignments using arrays
TERM_APPS=(
	Ghostty
	kitty
)

BROWSER_APPS=(
	"Microsoft Edge"
	Firefox
	Safari
)

CODE_APPS=(
	Code
	"Visual Studio"
	Cursor
	"Sublime Text"
)

DEV_APPS=(
	GitHub
	"MongoDB Compass"
	Docker
	"Docker Desktop"
	Cyberduck
)

COMMS_APPS=(
	"Spark Mail"
	zoom.us
	Slack
	"Microsoft Outlook"
	Thunderbird
)

REF_APPS=(
	Notion
	ChatGPT
	Ollama
)

MISC_APPS=(
	Finder
)

DEBUG_APPS=(
	"Google Chrome"
)

UTIL_APPS=(
	Figma
	1Password
	"Activity Monitor"
	"Karabiner-Elements"
)

# Function to assign apps to spaces
assign_to_space() {
	space=$1
	shift
	for app in "$@"; do
		label="${space}_${app// /_}"
		yabai -m rule --add label="$label" app="^${app}$" space="^${space}"
	done
}

# Assign apps to spaces
assign_to_space term "${TERM_APPS[@]}"
assign_to_space browser "${BROWSER_APPS[@]}"
assign_to_space code "${CODE_APPS[@]}"
assign_to_space dev "${DEV_APPS[@]}"
assign_to_space comms "${COMMS_APPS[@]}"
assign_to_space ref "${REF_APPS[@]}"
assign_to_space misc "${MISC_APPS[@]}"
assign_to_space debug "${DEBUG_APPS[@]}"
assign_to_space util "${UTIL_APPS[@]}"

# Space-Specific Configurations
yabai -m config --space term layout stack window_gap $PADDING window_opacity off top_padding 0 bottom_padding 0 left_padding 0 right_padding 0
yabai -m config --space browser layout bsp
yabai -m config --space code layout stack
yabai -m config --space dev layout bsp
yabai -m config --space comms layout bsp
yabai -m config --space ref layout bsp
yabai -m config --space misc layout bsp
yabai -m config --space debug layout bsp
yabai -m config --space util layout bsp

# Signals for `YabaiIndicator`
yabai -m signal --add event=mission_control_exit action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=display_added action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=display_removed action='echo "refresh" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_created action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_destroyed action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_focused action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_moved action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_resized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_minimized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
yabai -m signal --add event=window_deminimized action='echo "refresh windows" | nc -U /tmp/yabai-indicator.socket'
