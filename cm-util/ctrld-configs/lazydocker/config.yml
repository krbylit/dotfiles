# yaml-language-server: $schema=https://json.schemastore.org/lazydocker.json
gui:
  scrollHeight: 2
  language: "auto" # one of 'auto' | 'en' | 'pl' | 'nl' | 'de' | 'tr'
  border: "rounded" # one of 'rounded' | 'single' | 'double' | 'hidden'
  theme:
    activeBorderColor:
      - "#f4dbd6"
      - bold
    inactiveBorderColor:
      - "#a5adcb"
    selectedLineBgColor:
      - "#363a4f"
    optionsTextColor:
      - "#8aadf4"
  returnImmediately: false
  wrapMainPanel: true
  # Side panel width as a ratio of the screen's width
  sidePanelWidth: 0.333
  # Determines whether we show the bottom line (the one containing keybinding
  # info and the status of the app).
  showBottomLine: true
  # When true, increases vertical space used by focused side panel,
  # creating an accordion effect
  expandFocusedSidePanel: false
  # Determines which screen mode will be used on startup
  screenMode: "normal" # one of 'normal' | 'half' | 'fullscreen'
  # Determines the style of the container status and container health display in the
  # containers panel. "long": full words (default), "short": one or two characters,
  # "icon": unicode emoji.
  containerStatusHealthStyle: "long"
logs:
  timestamps: false
  since: "60m" # set to '' to show all logs
  tail: "" # set to 200 to show last 200 lines of logs
commandTemplates:
  dockerCompose: docker compose # Determines the Docker Compose command to run, referred to as .DockerCompose in commandTemplates
  restartService: "{{ .DockerCompose }} restart {{ .Service.Name }}"
  up: "{{ .DockerCompose }} up -d"
  down: "{{ .DockerCompose }} down"
  downWithVolumes: "{{ .DockerCompose }} down --volumes"
  upService: "{{ .DockerCompose }} up -d {{ .Service.Name }}"
  startService: "{{ .DockerCompose }} start {{ .Service.Name }}"
  stopService: "{{ .DockerCompose }} stop {{ .Service.Name }}"
  serviceLogs: "{{ .DockerCompose }} logs --since=60m --follow {{ .Service.Name }}"
  viewServiceLogs: "{{ .DockerCompose }} logs --follow {{ .Service.Name }}"
  rebuildService: "{{ .DockerCompose }} up -d --build {{ .Service.Name }}"
  recreateService: "{{ .DockerCompose }} up -d --force-recreate {{ .Service.Name }}"
  allLogs: "{{ .DockerCompose }} logs --tail=300 --follow"
  viewAlLogs: "{{ .DockerCompose }} logs"
  dockerComposeConfig: "{{ .DockerCompose }} config"
  checkDockerComposeConfig: "{{ .DockerCompose }} config --quiet"
  serviceTop: "{{ .DockerCompose }} top {{ .Service.Name }}"
oS:
  openCommand: open {{filename}}
  openLinkCommand: open {{link}}
stats:
  graphs:
    - caption: CPU (%)
      statPath: DerivedStats.CPUPercentage
      color: blue
    - caption: Memory (%)
      statPath: DerivedStats.MemoryPercentage
      color: green
customCommands:
  services:
    - name: "Rebuild no cache:"
      attach: true
      command: "{{ .DockerCompose }} build --no-cache {{ .Service.Name }}"
      serviceNames: []
    - name: "Rebuild:"
      attach: true
      command: "{{ .DockerCompose }} build {{ .Service.Name }}"
      serviceNames: []
      # FIXME: `--label` not recognize, might be version of docker/docker compose we're trying
    # - name: "Build prod-debug:"
    #   attach: true
    #   command: "{{ .DockerCompose }} build {{ .Service.Name }} --label preserve=true"
    #   serviceNames: []
  images:
    - name: "Tag as prod-debug:"
      attach: true
      command: "docker image tag {{ .Image.Name }} {{ .Image.Name }}:prod-debug"
      serviceNames: []
    # - name: "Full clean (respect preserve):"
    #   attach: true
    #   # FIXME: getting `panic: Starting quote has no ending quote.`
    #   command: docker images --format '{{.Repository}}:{{.Tag}} {{.ID}}' | awk '\$1 !~ /:prod-debug$/ { print \$2 }' | xargs -r docker rmi && docker container prune -f && docker volume prune -f && docker network prune -f
    #   serviceNames: []
    - name: "Remove all images:"
      attach: true
      command: "docker rmi $(docker images)"
      serviceNames: []
  containers:
    - name: "sh:"
      attach: true
      command: "docker exec -it {{ .Container.ID }} sh"
      serviceNames: []
